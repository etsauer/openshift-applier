---

- name: "Copy file to remote location if required"
  block:
    - name: "Clear processed facts"
      set_fact:
        processed_file_facts: []
    - name: "Copy inventory file to remote"
      include_tasks: copy-inventory-file-to-remote.yml
      vars:
        file_path: "{{ file }}"
    - name: "Set file facts"
      set_fact:
        file_facts: "{{ processed_file_facts|first }}"

- name: Grab patch file content if action == patch
  block:
    - name: Check if patch is file or url
      set_fact:
        patch_path: "{{ params | check_file_location }}"
    - name: Pull data from file
      set_fact:
        patch_content: "{{ lookup('file', params) | from_yaml }}"
      when: patch_path.local_path
    - name: Pull data from url
      set_fact:
        patch_content: "{{ lookup('url', params, split_lines=False) | from_yaml }}"
      when: not patch_path.local_path
  when: oc_action == 'patch'

- name: Process Jinja file (if applicable)
  block:
    - name: Create temporary directory for Jinja template output
      tempfile:
        state: directory
      register: tmp_jinja_dir_file
      notify:
        - Clean up temporary inventory dir

    - name: Set processed Jinja template output path
      set_fact:
        jinja_file_output_path: "{{ tmp_jinja_dir_file.path }}/{{ file_facts.oc_path | basename }}"

    - name: Process Jinja template
      template:
        src: "{{ file_facts.oc_path }}"
        dest: "{{ jinja_file_output_path }}"

    - name: Update file path
      set_fact:
        file_facts: "{{ file_facts | combine( {'oc_path': jinja_file_output_path} ) }}"
  when:
    - jinjatemplate

- name: "{{ oc_action | capitalize }} OpenShift objects based on static files for '{{ entry.object }} : {{ content.name | default(file | basename) }}'"
  command: >
    oc {{ oc_action }} \
       {{ target_namespace }} \
       -f {{ file_facts.oc_path }} \
       {{ (oc_action == 'delete') | ternary(' --ignore-not-found', '') }} \
       {% if oc_action == 'patch' %}
         -p '{{ patch_content | to_json }}'
       {% endif %}
  no_log: "{{ no_log }}"
  register: command_result
  failed_when:
    - command_result.rc != 0
    - "'AlreadyExists' not in command_result.stderr"
